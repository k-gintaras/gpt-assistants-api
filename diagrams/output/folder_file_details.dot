
digraph G {
  rankdir=TB; // Change layout to Top-to-Bottom
  nodesep=0.5; // Adjust horizontal spacing
  ranksep=1;   // Adjust vertical spacing
  node [fontname="Arial"];
  "app-test.ts" [shape=box];
  "app.ts" [shape=box];
  "controllers" [shape=folder];
  "assistant.controller.ts" [shape=box];
  "data" [shape=folder];
  "database" [shape=folder];
  "database.ts" [shape=box];
  "init.ts" [shape=box];
  "index.ts" [shape=box];
  "models" [shape=folder];
  "assistant.model.ts" [shape=box];
  "feedback.model.ts" [shape=box];
  "focused-memory.model.ts" [shape=box];
  "memory.model.ts" [shape=box];
  "promotion-criteria.model.ts" [shape=box];
  "relationship.model.ts" [shape=box];
  "service-models" [shape=folder];
  "connector.service.model.ts" [shape=box];
  "tag.model.ts" [shape=box];
  "task.model.ts" [shape=box];
  "queries" [shape=folder];
  "assistant.queries.ts" [shape=box];
  "routes" [shape=folder];
  "assistant.routes.ts" [shape=box];
  "services" [shape=folder];
  "assistant-full.service.ts" [shape=box];
  "assistant.service.ts" [shape=box];
  "feedback.service.ts" [shape=box];
  "focused-memory.service.ts" [shape=box];
  "gpt-api" [shape=folder];
  "gpt-api-assistant.ts" [shape=box];
  "createAssistant" [shape=diamond];
  "getAssistantById" [shape=diamond];
  "updateAssistant" [shape=diamond];
  "deleteAssistant" [shape=diamond];
  "gpt-api-chat-completion.ts" [shape=box];
  "createChatCompletion" [shape=diamond];
  "extractChatReply" [shape=diamond];
  "generateChatReply" [shape=diamond];
  "extendConversation" [shape=diamond];
  "gpt-api-connector.ts" [shape=box];
  "initOpenAI" [shape=diamond];
  "getOpenAI" [shape=diamond];
  "gpt-api-model-helper.ts" [shape=box];
  "evaluatePrompt" [shape=diamond];
  "estimateTokens" [shape=diamond];
  "getSuitableModels" [shape=diamond];
  "estimateTokensFromWords" [shape=diamond];
  "estimateTokensForResponse" [shape=diamond];
  "estimateTokensFromPrompt" [shape=diamond];
  "gpt-api-models.model.ts" [shape=box];
  "gpt-api-thread.ts" [shape=box];
  "createNewThread" [shape=diamond];
  "addThreadMessage" [shape=diamond];
  "addMultipleMessages" [shape=diamond];
  "fetchThreadMessages" [shape=diamond];
  "startAssistantRun" [shape=diamond];
  "waitForRunCompletion" [shape=diamond];
  "getRunDetails" [shape=diamond];
  "extractAssistantReply" [shape=diamond];
  "getAssistantReply" [shape=diamond];
  "queryAssistant" [shape=diamond];
  "gpt-api.config.ts" [shape=box];
  "memory-extra.service.ts" [shape=box];
  "memory-focus-rule.service.ts" [shape=box];
  "memory.service.ts" [shape=box];
  "owned-memory.service.ts" [shape=box];
  "relationship-graph.service.ts" [shape=box];
  "tag-extra.service.ts" [shape=box];
  "tag.service.ts" [shape=box];
  "task.service.ts" [shape=box];
  "unique-id.service.ts" [shape=box];
  "generateUniqueId" [shape=diamond];
  "tests" [shape=folder];
  "integration" [shape=folder];
  "gpt-api-chat-completion.integration.test.ts" [shape=box];
  "gpt-assistant.integration.test.ts" [shape=box];
  "gpt-threads.integration.test.ts" [shape=box];
  "unit" [shape=folder];
  "gpt-tests" [shape=folder];
  "gpt-api-thread.example.ts" [shape=box];
  "addMessage" [shape=diamond];
  "runAssistant" [shape=diamond];
  "runAssistantAndPoll" [shape=diamond];
  "getAllMessages" [shape=diamond];
  "extractAssistantResponse" [shape=diamond];
  "getAssistantResponse" [shape=diamond];
  "getRunResults" [shape=diamond];
  "getLastAssistantMessage" [shape=diamond];
  "queryAssistant" [shape=diamond];
  "addMessages" [shape=diamond];
  "getMessages" [shape=diamond];
  "initializeRun" [shape=diamond];
  "pollRunStatus" [shape=diamond];
  "addUserPrompt" [shape=diamond];
  "promptAssistant" [shape=diamond];
  "promptAssistantSimple" [shape=diamond];
  "gpt-assistant-with-functions.example.ts" [shape=box];
  "gpt-assistant.test.ts" [shape=box];
  "gpt-crud.example.ts" [shape=box];
  "other-tests" [shape=folder];
  "assistant.queries.test.ts" [shape=box];
  "gpt-api-model.helper.test.ts" [shape=box];
  "service-tests" [shape=folder];
  "assistant-full.service.test.ts" [shape=box];
  "assistant.service.test.ts" [shape=box];
  "database.test.ts" [shape=box];
  "feedback.service.test.ts" [shape=box];
  "focused-memory.service.test.ts" [shape=box];
  "memory-extra.service.test.ts" [shape=box];
  "memory-focus-rule.service.test.ts" [shape=box];
  "memory.service.test.ts" [shape=box];
  "owned-memory.service.test.ts" [shape=box];
  "relationship-graph.service.test.ts" [shape=box];
  "tag-extra.service.test.ts" [shape=box];
  "tag.service.test.ts" [shape=box];
  "task.service.test.ts" [shape=box];
  "test-db-insert.helper.ts" [shape=box];
  "test-db-return.helper.ts" [shape=box];
  "test-db.helper.ts" [shape=box];
  "TestDbHelper" [shape=ellipse];
  "test-object.helper.ts" [shape=box];
  "transformer-tests" [shape=folder];
  "assistant-full.transformer.test.ts" [shape=box];
  "assistant.transformer.test.ts" [shape=box];
  "memory-focus-rule.transformer.test.ts" [shape=box];
  "memory.transformer.test.ts" [shape=box];
  "transformers" [shape=folder];
  "assistant-full.transformer.ts" [shape=box];
  "transformFullAssistantResult" [shape=diamond];
  "assistant.transformer.ts" [shape=box];
  "transformAssistantRow" [shape=diamond];
  "transformAssistantWithDetails" [shape=diamond];
  "memory-focus-rule.transformer.ts" [shape=box];
  "transformMemoryFocusRuleRow" [shape=diamond];
  "memory.transformer.ts" [shape=box];
  "transformMemoryRow" [shape=diamond];
  "tag.transformer.ts" [shape=box];
  "transformTagRow" [shape=diamond];
  "controllers" -> "assistant.controller.ts";
  "database" -> "database.ts";
  "database" -> "init.ts";
  "models" -> "assistant.model.ts";
  "models" -> "feedback.model.ts";
  "models" -> "focused-memory.model.ts";
  "models" -> "memory.model.ts";
  "models" -> "promotion-criteria.model.ts";
  "models" -> "relationship.model.ts";
  "models" -> "service-models";
  "service-models" -> "connector.service.model.ts";
  "models" -> "tag.model.ts";
  "models" -> "task.model.ts";
  "queries" -> "assistant.queries.ts";
  "routes" -> "assistant.routes.ts";
  "services" -> "assistant-full.service.ts";
  "services" -> "assistant.service.ts";
  "services" -> "feedback.service.ts";
  "services" -> "focused-memory.service.ts";
  "services" -> "gpt-api";
  "gpt-api" -> "gpt-api-assistant.ts";
  "gpt-api-assistant.ts" -> "createAssistant";
  "gpt-api-assistant.ts" -> "getAssistantById";
  "gpt-api-assistant.ts" -> "updateAssistant";
  "gpt-api-assistant.ts" -> "deleteAssistant";
  "gpt-api" -> "gpt-api-chat-completion.ts";
  "gpt-api-chat-completion.ts" -> "createChatCompletion";
  "gpt-api-chat-completion.ts" -> "extractChatReply";
  "gpt-api-chat-completion.ts" -> "generateChatReply";
  "gpt-api-chat-completion.ts" -> "extendConversation";
  "gpt-api" -> "gpt-api-connector.ts";
  "gpt-api-connector.ts" -> "initOpenAI";
  "gpt-api-connector.ts" -> "getOpenAI";
  "gpt-api" -> "gpt-api-model-helper.ts";
  "gpt-api-model-helper.ts" -> "evaluatePrompt";
  "gpt-api-model-helper.ts" -> "estimateTokens";
  "gpt-api-model-helper.ts" -> "getSuitableModels";
  "gpt-api-model-helper.ts" -> "estimateTokensFromWords";
  "gpt-api-model-helper.ts" -> "estimateTokensForResponse";
  "gpt-api-model-helper.ts" -> "estimateTokensFromPrompt";
  "gpt-api" -> "gpt-api-models.model.ts";
  "gpt-api" -> "gpt-api-thread.ts";
  "gpt-api-thread.ts" -> "createNewThread";
  "gpt-api-thread.ts" -> "addThreadMessage";
  "gpt-api-thread.ts" -> "addMultipleMessages";
  "gpt-api-thread.ts" -> "fetchThreadMessages";
  "gpt-api-thread.ts" -> "startAssistantRun";
  "gpt-api-thread.ts" -> "waitForRunCompletion";
  "gpt-api-thread.ts" -> "getRunDetails";
  "gpt-api-thread.ts" -> "extractAssistantReply";
  "gpt-api-thread.ts" -> "getAssistantReply";
  "gpt-api-thread.ts" -> "queryAssistant";
  "gpt-api" -> "gpt-api.config.ts";
  "services" -> "memory-extra.service.ts";
  "services" -> "memory-focus-rule.service.ts";
  "services" -> "memory.service.ts";
  "services" -> "owned-memory.service.ts";
  "services" -> "relationship-graph.service.ts";
  "services" -> "tag-extra.service.ts";
  "services" -> "tag.service.ts";
  "services" -> "task.service.ts";
  "services" -> "unique-id.service.ts";
  "unique-id.service.ts" -> "generateUniqueId";
  "tests" -> "integration";
  "integration" -> "gpt-api-chat-completion.integration.test.ts";
  "integration" -> "gpt-assistant.integration.test.ts";
  "integration" -> "gpt-threads.integration.test.ts";
  "tests" -> "unit";
  "unit" -> "gpt-tests";
  "gpt-tests" -> "gpt-api-thread.example.ts";
  "gpt-api-thread.example.ts" -> "addMessage";
  "gpt-api-thread.example.ts" -> "runAssistant";
  "gpt-api-thread.example.ts" -> "runAssistantAndPoll";
  "gpt-api-thread.example.ts" -> "getAllMessages";
  "gpt-api-thread.example.ts" -> "extractAssistantResponse";
  "gpt-api-thread.example.ts" -> "getAssistantResponse";
  "gpt-api-thread.example.ts" -> "getRunResults";
  "gpt-api-thread.example.ts" -> "getLastAssistantMessage";
  "gpt-api-thread.example.ts" -> "queryAssistant";
  "gpt-api-thread.example.ts" -> "addMessages";
  "gpt-api-thread.example.ts" -> "getMessages";
  "gpt-api-thread.example.ts" -> "initializeRun";
  "gpt-api-thread.example.ts" -> "pollRunStatus";
  "gpt-api-thread.example.ts" -> "addUserPrompt";
  "gpt-api-thread.example.ts" -> "promptAssistant";
  "gpt-api-thread.example.ts" -> "promptAssistantSimple";
  "gpt-tests" -> "gpt-assistant-with-functions.example.ts";
  "gpt-tests" -> "gpt-assistant.test.ts";
  "gpt-tests" -> "gpt-crud.example.ts";
  "unit" -> "other-tests";
  "other-tests" -> "assistant.queries.test.ts";
  "other-tests" -> "gpt-api-model.helper.test.ts";
  "unit" -> "service-tests";
  "service-tests" -> "assistant-full.service.test.ts";
  "service-tests" -> "assistant.service.test.ts";
  "service-tests" -> "database.test.ts";
  "service-tests" -> "feedback.service.test.ts";
  "service-tests" -> "focused-memory.service.test.ts";
  "service-tests" -> "memory-extra.service.test.ts";
  "service-tests" -> "memory-focus-rule.service.test.ts";
  "service-tests" -> "memory.service.test.ts";
  "service-tests" -> "owned-memory.service.test.ts";
  "service-tests" -> "relationship-graph.service.test.ts";
  "service-tests" -> "tag-extra.service.test.ts";
  "service-tests" -> "tag.service.test.ts";
  "service-tests" -> "task.service.test.ts";
  "unit" -> "test-db-insert.helper.ts";
  "unit" -> "test-db-return.helper.ts";
  "unit" -> "test-db.helper.ts";
  "test-db.helper.ts" -> "TestDbHelper";
  "unit" -> "test-object.helper.ts";
  "unit" -> "transformer-tests";
  "transformer-tests" -> "assistant-full.transformer.test.ts";
  "transformer-tests" -> "assistant.transformer.test.ts";
  "transformer-tests" -> "memory-focus-rule.transformer.test.ts";
  "transformer-tests" -> "memory.transformer.test.ts";
  "transformers" -> "assistant-full.transformer.ts";
  "assistant-full.transformer.ts" -> "transformFullAssistantResult";
  "transformers" -> "assistant.transformer.ts";
  "assistant.transformer.ts" -> "transformAssistantRow";
  "assistant.transformer.ts" -> "transformAssistantWithDetails";
  "transformers" -> "memory-focus-rule.transformer.ts";
  "memory-focus-rule.transformer.ts" -> "transformMemoryFocusRuleRow";
  "transformers" -> "memory.transformer.ts";
  "memory.transformer.ts" -> "transformMemoryRow";
  "transformers" -> "tag.transformer.ts";
  "tag.transformer.ts" -> "transformTagRow"
}
