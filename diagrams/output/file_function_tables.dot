
digraph G {
  rankdir=TB;
  nodesep=0.5;
  ranksep=1;
  node [fontname="Arial"];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">src</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">app-test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">app.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">index.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\controllers_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">controllers</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.controller.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\data_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">data</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\database_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">database</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">database.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">init.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\models_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">models</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">feedback.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">focused-memory.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">promotion-criteria.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">relationship.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">tag.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">task.model.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\models\service-models_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">service-models</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">connector.service.model.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\queries_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">queries</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.queries.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\routes_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">routes</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.routes.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\services_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">services</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\services\gpt-api_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">gpt-api</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-assistant.ts</TD></TR><TR><TD>createAssistant(payload: GptAssistantCreateRequest): Promise</TD></TR><TR><TD>getAssistantById(id: string): Promise</TD></TR><TR><TD>updateAssistant(id: string, updates: GptAssistantCreateRequest): Promise</TD></TR><TR><TD>deleteAssistant(id: string): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-chat-completion.ts</TD></TR><TR><TD>createChatCompletion(model: string, messages: &lt;T&gt;, options: &lt;T&gt;): Promise</TD></TR><TR><TD>extractChatReply(completion: ChatCompletion): string | null</TD></TR><TR><TD>generateChatReply(model: string, messages: &lt;T&gt;, options: &lt;T&gt;): Promise</TD></TR><TR><TD>extendConversation(history: &lt;T&gt;, newMessages: &lt;T&gt;): &lt;T&gt;</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-connector.ts</TD></TR><TR><TD>initOpenAI(apiKey: string, project: string): void</TD></TR><TR><TD>getOpenAI(): OpenAI</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-model-helper.ts</TD></TR><TR><TD>evaluatePrompt(inputTokens: number, outputTokens: number, intelligence: &lt;T&gt;): PromptEvaluation</TD></TR><TR><TD>estimateTokens(text: string): number</TD></TR><TR><TD>getSuitableModels(inputTokens: number, outputTokens: number): Model</TD></TR><TR><TD>estimateTokensFromWords(words: number): number</TD></TR><TR><TD>estimateTokensForResponse(inputWords: number, responseSize: &lt;T&gt;): &lt;T&gt;</TD></TR><TR><TD>estimateTokensFromPrompt(prompt: string, responseSize: &lt;T&gt;): &lt;T&gt;</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-models.model.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-thread.ts</TD></TR><TR><TD>createNewThread(purpose: string, createdBy: string): Promise</TD></TR><TR><TD>addThreadMessage(threadId: string, role: &lt;T&gt;, content: string): Promise</TD></TR><TR><TD>addMultipleMessages(threadId: string, messages: &lt;T&gt;): Promise</TD></TR><TR><TD>fetchThreadMessages(threadId: string, limit: number, order: &lt;T&gt;): Promise</TD></TR><TR><TD>startAssistantRun(threadId: string, assistantId: string, instructions: string | undefined): Promise</TD></TR><TR><TD>waitForRunCompletion(threadId: string, assistantId: string, instructions: string | undefined): Promise</TD></TR><TR><TD>getRunDetails(threadId: string, runId: string): Promise</TD></TR><TR><TD>extractAssistantReply(messages: MessagesPage): string | null</TD></TR><TR><TD>getAssistantReply(threadId: string): Promise</TD></TR><TR><TD>queryAssistant(assistantId: string, prompt: string, instructions: string | undefined): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api.config.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\services\sqlite-services_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">sqlite-services</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant-full.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">FullAssistantService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getFullAssistantWithDetails(id: string): Promise</TD></TR><TR><TD>getFullAssistantWithDetailsEfficient(id: string): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">AssistantService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getAllAssistants(): AssistantRow</TD></TR><TR><TD>getAssistantById(id: string): AssistantRow</TD></TR><TR><TD>addAssistant(assistant: Assistant): Promise</TD></TR><TR><TD>updateAssistant(id: string, updates: Assistant): Promise</TD></TR><TR><TD>deleteAssistant(id: string): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">feedback.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">FeedbackService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getFeedbackById(id: string): Feedback</TD></TR><TR><TD>getFeedbackByTarget(targetId: string, targetType: &lt;T&gt;): Feedback</TD></TR><TR><TD>addFeedback(feedback: Feedback): Promise</TD></TR><TR><TD>updateFeedback(id: string, updates: Feedback): Promise</TD></TR><TR><TD>deleteFeedback(id: string): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">focused-memory.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">FocusedMemoryService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getFocusedMemoriesByAssistantId(assistantId: string): Promise</TD></TR><TR><TD>getFocusedMemories(memoryFocusId: string): Promise</TD></TR><TR><TD>addFocusedMemory(memoryFocusId: string, memoryId: string): Promise</TD></TR><TR><TD>removeFocusedMemory(memoryFocusId: string, memoryId: string): Promise</TD></TR><TR><TD>updateFocusedMemories(memoryFocusId: string, memoryIds: &lt;T&gt;): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory-extra.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">MemoryExtraService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getAllMemories(): Promise</TD></TR><TR><TD>getMemoriesByTags(tags: &lt;T&gt;): Promise</TD></TR><TR><TD>updateMemoryTags(memoryId: string, newTags: &lt;T&gt;): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory-focus-rule.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">MemoryFocusRuleService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getMemoryFocusRules(assistantId: string): Promise</TD></TR><TR><TD>updateMemoryFocusRule(id: string, updates: MemoryFocusRule): Promise</TD></TR><TR><TD>removeMemoryFocusRule(id: string): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">MemoryService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>addMemory(memory: Memory): Promise</TD></TR><TR><TD>removeMemory(memoryId: string): Promise</TD></TR><TR><TD>updateMemory(id: string, updates: Memory): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">owned-memory.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">OwnedMemoryService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getMemoriesByAssistantId(assistantId: string): Promise</TD></TR><TR><TD>getOwnedMemories(assistantId: string): Promise</TD></TR><TR><TD>addOwnedMemory(assistantId: string, memoryId: string): Promise</TD></TR><TR><TD>removeOwnedMemory(assistantId: string, memoryId: string): Promise</TD></TR><TR><TD>updateOwnedMemories(assistantId: string, memoryIds: &lt;T&gt;): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">relationship-graph.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">RelationshipGraphService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getAllRelationships(): RelationshipGraph</TD></TR><TR><TD>getRelationshipsBySource(targetId: string, type: &lt;T&gt;): RelationshipGraph</TD></TR><TR><TD>addRelationship(relationship: RelationshipGraph): Promise</TD></TR><TR><TD>updateRelationship(id: string, updates: RelationshipGraph): Promise</TD></TR><TR><TD>deleteRelationship(id: string): Promise</TD></TR><TR><TD>transformRow(row: RelationshipGraphRow): RelationshipGraph</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">tag-extra.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">TagExtraService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getTagsByEntity(entityId: string, entityType: &lt;T&gt;): Tag</TD></TR><TR><TD>addTagToEntity(entityId: string, tagId: string, entityType: &lt;T&gt;): Promise</TD></TR><TR><TD>removeTagFromEntity(entityId: string, tagId: string, entityType: &lt;T&gt;): Promise</TD></TR><TR><TD>getTableNameForEntity(entityType: &lt;T&gt;): string</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">tag.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">TagService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>addTag(tag: Tag): Promise</TD></TR><TR><TD>removeTag(tagId: string): Promise</TD></TR><TR><TD>updateTag(id: string, updates: Tag): Promise</TD></TR><TR><TD>getTagById(tagId: string): Promise</TD></TR><TR><TD>getAllTags(): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">task.service.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">TaskService</TD></TR><TR><TD>setDb(newDb: &lt;T&gt;): void</TD></TR><TR><TD>getTaskById(id: string): Task</TD></TR><TR><TD>getAllTasks(): Task</TD></TR><TR><TD>addTask(task: Task): Promise</TD></TR><TR><TD>updateTask(id: string, updates: Task): Promise</TD></TR><TR><TD>deleteTask(id: string): Promise</TD></TR><TR><TD>getTasksByStatus(status: &lt;T&gt;): Task</TD></TR><TR><TD>getTasksByAssistant(assistantId: string): Task</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">unique-id.service.ts</TD></TR><TR><TD>generateUniqueId(): &lt;T&gt;</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">tests</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests\integration_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">integration</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-chat-completion.integration.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-assistant.integration.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-threads.integration.test.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests\unit_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">unit</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">test-db-insert.helper.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">test-db-return.helper.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">test-db.helper.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightyellow">TestDbHelper</TD></TR><TR><TD>initialize(): &lt;T&gt;</TD></TR><TR><TD>reset(): void</TD></TR><TR><TD>close(): void</TD></TR><TR><TD>getDb(): &lt;T&gt;</TD></TR><TR><TD>loadSchema(): void</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">test-object.helper.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests\unit\gpt-tests_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">gpt-tests</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-thread.example.ts</TD></TR><TR><TD>addMessage(threadId: string, role: &lt;T&gt;, content: string): Promise</TD></TR><TR><TD>runAssistant(threadId: string, assistantId: string): Promise</TD></TR><TR><TD>runAssistantAndPoll(threadId: string, assistantId: string, instructions: string | undefined): Promise</TD></TR><TR><TD>getAllMessages(threadId: string, limit: number, order: &lt;T&gt;): Promise</TD></TR><TR><TD>extractAssistantResponse(messages: MessagesPage): string | null</TD></TR><TR><TD>getAssistantResponse(threadId: string): Promise</TD></TR><TR><TD>getRunResults(threadId: string, runId: string): Promise</TD></TR><TR><TD>getLastAssistantMessage(threadId: string): Promise</TD></TR><TR><TD>queryAssistant(assistantId: string, prompt: string): Promise</TD></TR><TR><TD>addMessages(threadId: string, messages: &lt;T&gt;): Promise</TD></TR><TR><TD>getMessages(threadId: string, limit: number, order: &lt;T&gt;): Promise</TD></TR><TR><TD>initializeRun(threadId: string, assistantId: string): Promise</TD></TR><TR><TD>pollRunStatus(threadId: string, runId: string): Promise</TD></TR><TR><TD>addUserPrompt(threadId: string, prompt: string): Promise</TD></TR><TR><TD>promptAssistant(threadId: string, assistantId: string, prompt: string): Promise</TD></TR><TR><TD>promptAssistantSimple(threadId: string, assistantId: string, prompt: string, instructions: string | undefined): Promise</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-assistant-with-functions.example.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-assistant.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-crud.example.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests\unit\other-tests_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">other-tests</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.queries.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">gpt-api-model.helper.test.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests\unit\service-tests_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">service-tests</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant-full.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">database.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">feedback.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">focused-memory.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory-extra.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory-focus-rule.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">owned-memory.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">relationship-graph.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">tag-extra.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">tag.service.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">task.service.test.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\tests\unit\transformer-tests_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">transformer-tests</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant-full.transformer.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.transformer.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory-focus-rule.transformer.test.ts</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory.transformer.test.ts</TD></TR>
    </TABLE>>];
  "C:\Users\Ubaby\NodeJS Projects\gpt-assistants-api\gpt-assistants-api\src\transformers_files_functions" [shape=plaintext label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
      <TR><TD COLSPAN="1" BGCOLOR="lightblue">transformers</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant-full.transformer.ts</TD></TR><TR><TD>transformFullAssistantResult(rows: FullAssistantRows): AssistantWithDetails</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">assistant.transformer.ts</TD></TR><TR><TD>transformAssistantRow(row: AssistantRow): Assistant</TD></TR><TR><TD>transformAssistantWithDetails(assistantRow: AssistantRow, memoryRows: MemoryRow, memoryTags: Tag, assistantTags: TagRow, memoryFocusRuleRow: MemoryFocusRuleRow, feedbackSummaryRows: FeedbackSummaryRow): AssistantWithDetails</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory-focus-rule.transformer.ts</TD></TR><TR><TD>transformMemoryFocusRuleRow(row: MemoryFocusRuleRow): MemoryFocusRule</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">memory.transformer.ts</TD></TR><TR><TD>transformMemoryRow(row: MemoryRow, tags: Tag): Memory</TD></TR><TR><TD COLSPAN="1" BGCOLOR="lightgrey">tag.transformer.ts</TD></TR><TR><TD>transformTagRow(row: TagRow): Tag</TD></TR>
    </TABLE>>];
}
