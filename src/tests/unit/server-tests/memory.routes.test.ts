import express from 'express';
import request from 'supertest';
import memoryRoutes from '../../../routes/memory.routes';
import { Pool } from 'pg'; // Use pg for PostgreSQL
import { Memory } from '../../../models/memory.model';
import { getDb } from '../../../database/database';
import { insertHelpers } from '../test-db-insert.helper';

let db: Pool;
const app = express();
app.use(express.json());
app.use('/memories', memoryRoutes); // Register memory routes

const uniqueIdPrefix = 'memoryRouteTest_'; // Unique identifier prefix for testing

beforeAll(async () => {
  await getDb().initialize();
  db = getDb().getInstance();
});

beforeEach(async () => {
  await db.query('BEGIN'); // Begin transaction before each test
});

afterEach(async () => {
  await db.query('ROLLBACK'); // Rollback changes after each test
});

afterAll(async () => {
  await getDb().close(); // Clean up the test database after tests
});

describe('Memory Controller Tests', () => {
  it('should fetch all memories', async () => {
    await insertHelpers.insertMemory(db, uniqueIdPrefix + '2', 'm1');
    const response = await request(app).get('/memories');
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body.data)).toBe(true);
  });

  it('should fetch memory by ID', async () => {
    await insertHelpers.insertMemory(db, uniqueIdPrefix + '4', 'm1');

    const response = await request(app).get(`/memories/${uniqueIdPrefix + '4'}`);
    expect(response.status).toBe(200);
    expect(response.body.data).toHaveProperty('id');
    expect(response.body.data.id).toBe(uniqueIdPrefix + '4');
  });

  it('should return 404 for non-existent memory ID', async () => {
    const response = await request(app).get('/memories/999');
    expect(response.status).toBe(404);
    expect(response.body.message).toBe('Memory with ID 999 not found.');
  });

  it('should create memory', async () => {
    const newMemory: Memory = {
      description: 'New memory description',
      id: '', // ID will be generated by the database
      type: 'instruction',
      data: null,
      createdAt: null,
      updatedAt: null,
      name: null,
      summary: null,
    };
    const response = await request(app).post('/memories').send(newMemory);
    expect(response.status).toBe(201);
    expect(response.body.message).toBe('Memory created successfully.');
    expect(response.body.data).toHaveProperty('id');
  });

  it('should return 500 for missing required fields in memory creation', async () => {
    const newMemory = {}; // Missing description
    const response = await request(app).post('/memories').send(newMemory);
    expect(response.status).toBe(500);
    expect(response.body.message).toBe('Failed to create memory.');
  });

  it('should update memory', async () => {
    await insertHelpers.insertMemory(db, uniqueIdPrefix + '5', 'm1');

    const updatedMemory = {
      description: 'Updated memory description',
      id: uniqueIdPrefix + '5', // Use unique prefix
    };
    const response = await request(app)
      .put(`/memories/${uniqueIdPrefix + '5'}`)
      .send(updatedMemory);
    expect(response.status).toBe(200);
    expect(response.body.message).toBe('Memory updated successfully.');
  });

  it('should return 400 for updating non-existent memory ID', async () => {
    const updatedMemory = {
      description: 'Updated memory description',
    };
    const response = await request(app).put('/memories/999').send(updatedMemory);
    expect(response.status).toBe(400);
    expect(response.body.message).toBe('Memory ID mismatch.');
  });

  it('should delete memory', async () => {
    await insertHelpers.insertMemory(db, uniqueIdPrefix + '6', 'm1');

    const response = await request(app).delete(`/memories/${uniqueIdPrefix + '6'}`);
    expect(response.status).toBe(200);
    expect(response.body.message).toBe('Memory deleted successfully.');
  });

  it('should return 404 for deleting non-existent memory ID', async () => {
    const response = await request(app).delete('/memories/999');
    expect(response.status).toBe(404);
    expect(response.body.message).toBe('Memory with ID 999 not found or delete failed.');
  });
});
