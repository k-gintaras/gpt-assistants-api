import request from 'supertest';
import express from 'express';
import taskRoutes from '../../../routes/task.routes';
import { getDb } from '../../../database/database';
import { Pool } from 'pg';
import { insertHelpers } from '../test-db-insert.helper';

let db: Pool;
const app = express();
app.use(express.json());
app.use('/tasks', taskRoutes); // Register task routes

const uniqueIdPrefix = 'taskTest_'; // Unique identifier prefix for testing

beforeAll(async () => {
  await getDb().initialize();
  db = getDb().getInstance();
});

beforeEach(async () => {
  await db.query('BEGIN'); // Begin transaction before each test
});

afterEach(async () => {
  await db.query('ROLLBACK'); // Rollback changes after each test
});

afterAll(async () => {
  await getDb().close(); // Clean up the test database after tests
});

describe('Task Controller Tests', () => {
  it('should fetch a task by ID', async () => {
    const taskId = uniqueIdPrefix + '1'; // Use unique task ID
    const assistantId = uniqueIdPrefix + 'a1'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);
    await insertHelpers.insertTask(db, taskId, 'qq', assistantId);

    const response = await request(app).get(`/tasks/${taskId}`);
    expect(response.status).toBe(200);
    expect(response.body.data).toHaveProperty('id');
    expect(response.body.data.id).toBe(taskId);
  });

  it('should fetch all tasks', async () => {
    const taskId = uniqueIdPrefix + '2'; // Use unique task ID
    const assistantId = uniqueIdPrefix + 'a2'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);
    await insertHelpers.insertTask(db, taskId, 'qq', assistantId);

    const response = await request(app).get('/tasks');
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body.data)).toBe(true);
    expect(response.body.data.length).toBeGreaterThan(0);
  });

  it('should create a new task', async () => {
    const assistantId = uniqueIdPrefix + 'a3'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);

    const newTask = {
      description: 'Test task description',
      status: 'pending',
      id: '', // ID will be generated by the database
      assignedAssistant: assistantId, // Use unique assistant ID
    };

    const response = await request(app).post('/tasks').send(newTask);
    expect(response.status).toBe(201);
    expect(response.body.message).toBe('Task created successfully.');
    expect(response.body.data).toHaveProperty('id');
  });

  it('should update a task', async () => {
    const taskId = uniqueIdPrefix + '3'; // Use unique task ID
    const assistantId = uniqueIdPrefix + 'a3'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);
    await insertHelpers.insertTask(db, taskId, 'qq', assistantId);

    const updatedTask = {
      title: 'Updated Task',
      description: 'Updated task description',
      status: 'in_progress',
    };

    const response = await request(app).put(`/tasks/${taskId}`).send(updatedTask);
    expect(response.status).toBe(200);
    expect(response.body.message).toBe('Task updated successfully.');
  });

  it('should return 500 when updating a non-existent task', async () => {
    const updatedTask = {
      title: 'Updated Task',
      description: 'Updated task description',
      status: 'in_progress',
    };

    const response = await request(app).put('/tasks/999').send(updatedTask); // Non-existent task ID
    expect(response.status).toBe(500);
    expect(response.body.message).toBe('Failed to update task.');
  });

  it('should delete a task', async () => {
    const taskId = uniqueIdPrefix + '5'; // Use unique task ID
    const assistantId = uniqueIdPrefix + 'a5'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);
    await insertHelpers.insertTask(db, taskId, 'qq', assistantId);

    const response = await request(app).delete(`/tasks/${taskId}`);
    expect(response.status).toBe(200);
    expect(response.body.message).toBe('Task deleted successfully.');
  });

  it('should return 404 for deleting a non-existent task', async () => {
    const response = await request(app).delete('/tasks/999'); // Non-existent task ID
    expect(response.status).toBe(404);
    expect(response.body.message).toBe('Task with ID 999 not found or delete failed.');
  });

  it('should fetch tasks by status', async () => {
    const taskId = uniqueIdPrefix + '6'; // Use unique task ID
    const assistantId = uniqueIdPrefix + 'a6'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);
    await insertHelpers.insertTask(db, taskId, 'qq', assistantId, 'pending');

    const status = 'pending'; // Replace with valid status

    const response = await request(app).get(`/tasks/status/${status}`);
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body.data)).toBe(true);
    expect(response.body.data.length).toBeGreaterThan(0);
  });

  it('should fetch tasks by assistant ID', async () => {
    const taskId = uniqueIdPrefix + '7'; // Use unique task ID
    const assistantId = uniqueIdPrefix + 'a7'; // Use unique task ID

    await insertHelpers.insertAssistant(db, assistantId);
    await insertHelpers.insertTask(db, taskId, 'qq', assistantId, 'pending');

    const response = await request(app).get(`/tasks/assistant/${assistantId}`);
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body.data)).toBe(true);
    expect(response.body.data.length).toBeGreaterThan(0);
  });
});
